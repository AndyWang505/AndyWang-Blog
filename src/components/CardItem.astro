---
import FormattedDate from './FormattedDate.astro';

export interface Props {
  slug: string;
  title: string;
  heroImage: string;
  pubDate: Date;
  category: string;
  tags: string[];
  description: string;
  content?: string;
}

const { slug, title, heroImage, pubDate, category, tags, description, content } = Astro.props;

// 計算文章內容的字數（移除 HTML 標籤和 Markdown 語法）
function getWordCount(text: string): number {
  if (!text) return 0;
  
  // 移除 HTML 標籤
  const withoutHtml = text.replace(/<[^>]*>/g, ' ');
  
  // 移除 Markdown 語法
  const withoutMarkdown = withoutHtml
    .replace(/#{1,6}\s/g, '') // 標題
    .replace(/\*\*([^*]+)\*\*/g, '$1') // 粗體
    .replace(/\*([^*]+)\*/g, '$1') // 斜體
    .replace(/`([^`]+)`/g, '$1') // 行內代碼
    .replace(/```[\s\S]*?```/g, '') // 代碼塊
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // 連結
    .replace(/!\[([^\]]*)\]\([^)]+\)/g, '$1') // 圖片
    .replace(/>\s/g, '') // 引用
    .replace(/[-*+]\s/g, '') // 列表
    .replace(/\d+\.\s/g, ''); // 有序列表
  
  // 計算中文字符和英文單詞
  const chineseChars = (withoutMarkdown.match(/[\u4e00-\u9fff]/g) || []).length;
  const englishWords = (withoutMarkdown.match(/[a-zA-Z]+/g) || []).length;
  
  // 中文按字符計算，英文按單詞計算
  return chineseChars + englishWords;
}

// 計算閱讀時間（中文250字/分鐘，英文200詞/分鐘的平均速度）
function getReadingTime(wordCount: number): number {
  if (wordCount === 0) return 1;
  
  // 平均閱讀速度：中文250字/分鐘
  const readingTime = Math.ceil(wordCount / 250);
  return Math.max(1, readingTime);
}

const wordCount = content ? getWordCount(content) : getWordCount(description);
const readingTime = getReadingTime(wordCount);
const hasCover = heroImage !== undefined && heroImage !== null && heroImage !== "";
const coverWidth = "28%";
---

<div class="flex flex-col-reverse md:flex-col w-full rounded-xl overflow-hidden relative mb-6 
              bg-white dark:bg-zinc-900 
              shadow-sm dark:shadow-gray-900/20 
              hover:shadow-lg dark:hover:shadow-gray-900/40 
              hover:-translate-y-0.5 
              transition-all duration-300 ease-out">
  <div class={`pl-6 md:pl-9 pr-6 md:pr-2 pt-6 md:pt-7 pb-6 relative ${hasCover ? 'w-full md:w-[calc(100%_-_var(--coverWidth)_-_12px)]' : 'w-full md:w-[calc(100%_-_52px_-_12px)]'}`}>
    <a href={`/post/${slug}/`}
       class="group w-full block font-bold mb-3 text-2xl md:text-3xl 
       text-zinc-900 dark:text-zinc-100
       hover:text-blue-600 dark:hover:text-blue-400
       active:text-blue-700 dark:active:text-blue-300
       transition-colors duration-200 ease-out
       before:w-1 before:h-5 before:rounded-md before:bg-blue-600
       before:absolute before:top-[35px] before:left-[18px] before:hidden md:before:block">
      {title}
      <svg class="inline text-[2rem] text-blue-600 dark:text-blue-400 md:hidden translate-y-0.5 absolute transition-colors duration-200" width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
        <path d="M8.59 16.58L13.17 12L8.59 7.41L10 6L16 12L10 18L8.59 16.58Z"/>
      </svg>
      <svg class="text-blue-600 dark:text-blue-400 text-[2rem] hidden md:inline absolute translate-y-0.5 opacity-0 group-hover:opacity-100 -translate-x-1 group-hover:translate-x-0 transition-all duration-300" width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
        <path d="M8.59 16.58L13.17 12L8.59 7.41L10 6L16 12L10 18L8.59 16.58Z"/>
      </svg>
    </a>

    <!-- metadata -->
    <div class="flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2 mb-4 transition-colors duration-300">
      <!-- publish date -->
      <div class="flex items-center">
        <div class="mr-2">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
        </div>
        <span class="text-sm font-medium transition-colors duration-300"><FormattedDate date={pubDate} /></span>
      </div>

      <!-- categories -->
      <div class="flex items-center">
        <div class="mr-2">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M22 19a2 2 0 01-2 2H4a2 2 0 01-2-2V5a2 2 0 012-2h5l2 3h9a2 2 0 012 2z"></path>
          </svg>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
          <span class="text-sm font-medium hover:text-blue-600 dark:hover:text-blue-400 cursor-pointer whitespace-nowrap transition-colors duration-200">
            {category}
          </span>
        </div>
      </div>

      <!-- tags -->
      <div class="flex items-center">
        <div class="mr-2">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M20.59 13.41l-7.17 7.17a2 2 0 01-2.83 0L2 12V2h10l8.59 8.59a2 2 0 010 2.82z"></path>
            <line x1="7" y1="7" x2="7.01" y2="7"></line>
          </svg>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
          {tags && tags.length > 0 && tags.map((tag, i) => (
            <>
              {i > 0 && <div class="mx-1.5 text-neutral-400 text-sm">/</div>}
              <span class="text-sm font-medium hover:text-blue-600 dark:hover:text-blue-400 cursor-pointer whitespace-nowrap transition-colors duration-200">
                {tag.trim()}
              </span>
            </>
          ))}
        </div>
      </div>
    </div>

    <!-- description -->
    <div class="text-neutral-600 dark:text-neutral-300 mb-3.5 pr-4 line-clamp-2 md:line-clamp-3 transition-colors duration-300">
      {description}
    </div>

    <!-- word count and reading time -->
    <div class="text-sm text-black/30 dark:text-white/30 flex gap-4 transition-colors duration-300">
      <div>{wordCount} {wordCount === 1 ? 'word' : 'words'}</div>
      <div>|</div>
      <div>{readingTime} {readingTime === 1 ? 'minute' : 'minutes'}</div>
    </div>
  </div>

  {hasCover && 
    <a href={`/post/${slug}/`} 
       class="group max-h-[20vh] md:max-h-none mx-4 mt-4 -mb-2 md:mb-0 md:mx-0 md:mt-0 md:w-[var(--coverWidth)] relative md:absolute md:top-3 md:bottom-3 md:right-3 rounded-xl overflow-hidden active:scale-95 transition-transform duration-200 ease-out">
      <div class="absolute pointer-events-none z-10 w-full h-full group-hover:bg-black/30 group-active:bg-black/50 transition-colors duration-300"></div>
      <div class="absolute pointer-events-none z-20 w-full h-full flex items-center justify-center">
        <svg class="opacity-0 group-hover:opacity-100 scale-50 group-hover:scale-100 text-white text-5xl transition-all duration-300" width="60" height="60" viewBox="0 0 24 24" fill="currentColor">
          <path d="M8.59 16.58L13.17 12L8.59 7.41L10 6L16 12L10 18L8.59 16.58Z"/>
        </svg>
      </div>
      <img class="w-full h-full object-cover transition-transform duration-300" src={heroImage} alt={title} />
    </a>
  }

  {!hasCover &&
    <a href={`/post/${slug}/`}
       class="hidden md:flex items-center justify-center w-[3.25rem] absolute right-3 top-3 bottom-3 rounded-xl 
       bg-neutral-100 dark:bg-neutral-800 hover:bg-neutral-200 dark:hover:bg-neutral-700 
       active:bg-neutral-300 dark:active:bg-neutral-600 active:scale-95 
       transition-all duration-200 ease-out">
      <svg class="text-blue-600 dark:text-blue-400 text-4xl transition-colors duration-200" width="40" height="40" viewBox="0 0 24 24" fill="currentColor">
        <path d="M8.59 16.58L13.17 12L8.59 7.41L10 6L16 12L10 18L8.59 16.58Z"/>
      </svg>
    </a>
  }
</div>
<div class="border-t-[1px] border-dashed mx-6 border-black/10 dark:border-white/[0.15] last:border-t-0 md:hidden transition-colors duration-300"></div>

<style define:vars={{coverWidth}}>
/* 只保留必要的 CSS 變數 */
</style>

