---
import { getCollection } from 'astro:content';
import FormattedDate from '../components/FormattedDate.astro';
import Layout from '../layouts/Layout.astro';
import Aside from '../layouts/Aside.astro';
import CardItem from '../components/CardItem.astro';
import Pagination from '../components/Pagination.astro';

const blog = await getCollection('blog');

const postsWithContent = await Promise.all(
  blog.map(async (post) => {
    const { Content } = await post.render();
    return {
      ...post,
      content: post.body
    };
  })
);

const posts = postsWithContent.sort((a: any, b: any) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const postsPerPage = 10;
const currentPage = 1;
const totalPages = Math.ceil(posts.length / postsPerPage);
const startIndex = (currentPage - 1) * postsPerPage;
const endIndex = startIndex + postsPerPage;
const paginatedPosts = posts.slice(startIndex, endIndex);
---

<Layout>
  <!-- Main content wrapper layout -->
  <div class="relative max-w-[var(--page-width)] mx-auto">
    <div class="transition duration-700 w-full grid grid-cols-[17.5rem_auto] grid-rows-[auto_1fr_auto] lg:grid-rows-[auto] mx-auto gap-4">
      <Aside />
      <main class="col-span-2 lg:col-span-1 p-0 overflow-hidden">
        <div class="onload-animation">
          <section>
            <ul>
          {paginatedPosts.map((post: any) => (
            <CardItem
              slug={post.slug}
              title={post.data.title}
              heroImage={post.data.heroImage}
              pubDate={post.data.pubDate}
              category={post.data.category}
              tags={post.data.tags}
              description={post.data.description}
              content={post.content}
            />
          ))}

            </ul>
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              baseUrl=""
            />
          </section>
        </div>
      </main>
    </div>
  </div>
</Layout>
